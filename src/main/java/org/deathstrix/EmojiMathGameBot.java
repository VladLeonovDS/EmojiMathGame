package org.deathstrix;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;
import java.util.stream.Collectors;

/**
 * –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∏–≥—Ä—ã "–≠–º–æ–¥–∑–∏-–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞".
 * –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–∑ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ,
 * —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 */
public class EmojiMathGameBot extends TelegramLongPollingBot {
    private static final Logger log = LoggerFactory.getLogger(EmojiMathGameBot.class);
    private final Map<String, Long> records = new HashMap<>();
    private final Map<String, Integer> currentScores = new HashMap<>();
    private final Map<String, List<String>> usedEmojis = new HashMap<>();
    private final Map<String, EmojiAction> emojiActions = new HashMap<>();

    public EmojiMathGameBot() {
        super("bottoken");
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º–æ–¥–∑–∏-–¥–µ–π—Å—Ç–≤–∏–π
        emojiActions.put("‚ûï", new AddAction(5));
        emojiActions.put("‚ûñ", new SubtractAction(3));
        emojiActions.put("‚úñÔ∏è", new MultiplyAction(2));
        emojiActions.put("‚ûó", new DivideAction(2));
        emojiActions.put("üîº", new AddAction(10));
        emojiActions.put("üîΩ", new SubtractAction(5));
        emojiActions.put("üî¢", new AppendLastDigitAction());
        emojiActions.put("üîÄ", new ShuffleDigitsAction());
        emojiActions.put("üîÑ", new ReverseNumberAction());
        emojiActions.put("üìà", new AddLastTwoDigitsAction());
        emojiActions.put("üìâ", new SubtractLastDigitAction());
        emojiActions.put("üé≤", new RandomMultiplyAction());
        emojiActions.put("üíØ", new MultiplyAction(100));
        emojiActions.put("üîü", new MultiplyAction(10));
        emojiActions.put("1Ô∏è‚É£", new AppendDigitAction(1));
        emojiActions.put("2Ô∏è‚É£", new AppendDigitAction(2));
        emojiActions.put("3Ô∏è‚É£", new AppendDigitAction(3));
        emojiActions.put("4Ô∏è‚É£", new AppendDigitAction(4));
        emojiActions.put("5Ô∏è‚É£", new AppendDigitAction(5));
    }

    /**
     * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö —ç–º–æ–¥–∑–∏
     */
    public interface EmojiAction {
        /**
         * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∫ —á–∏—Å–ª—É
         * @param num –∏—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ
         * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
         */
        long apply(long num);

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
         * @return —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
         */
        String getDescription();
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è —Å–ª–æ–∂–µ–Ω–∏—è
     */
    public static class AddAction implements EmojiAction {
        private final int value;

        /**
         * @param value —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏–±–∞–≤–ª—è—Ç—å—Å—è
         */
        public AddAction(int value) {
            this.value = value;
        }

        @Override
        public long apply(long num) {
            return num + value;
        }

        @Override
        public String getDescription() {
            return "–ü—Ä–∏–±–∞–≤–ª—è–µ—Ç " + value + " –∫ —á–∏—Å–ª—É";
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –≤—ã—á–∏—Ç–∞–Ω–∏—è
     */
    public static class SubtractAction implements EmojiAction {
        private final int value;

        /**
         * @param value —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã—á–∏—Ç–∞—Ç—å—Å—è
         */
        public SubtractAction(int value) {
            this.value = value;
        }

        @Override
        public long apply(long num) {
            return num - value;
        }

        @Override
        public String getDescription() {
            return "–í—ã—á–∏—Ç–∞–µ—Ç " + value + " –∏–∑ —á–∏—Å–ª–∞";
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è —É–º–Ω–æ–∂–µ–Ω–∏—è
     */
    public static class MultiplyAction implements EmojiAction {
        private final int multiplier;

        /**
         * @param multiplier –º–Ω–æ–∂–∏—Ç–µ–ª—å
         */
        public MultiplyAction(int multiplier) {
            this.multiplier = multiplier;
        }

        @Override
        public long apply(long num) {
            return num * multiplier;
        }

        @Override
        public String getDescription() {
            return "–£–º–Ω–æ–∂–∞–µ—Ç —á–∏—Å–ª–æ –Ω–∞ " + multiplier;
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –¥–µ–ª–µ–Ω–∏—è
     */
    public static class DivideAction implements EmojiAction {
        private final int divisor;

        /**
         * @param divisor –¥–µ–ª–∏—Ç–µ–ª—å
         */
        public DivideAction(int divisor) {
            this.divisor = divisor;
        }

        @Override
        public long apply(long num) {
            return num / divisor;
        }

        @Override
        public String getDescription() {
            return "–î–µ–ª–∏—Ç —á–∏—Å–ª–æ –Ω–∞ " + divisor;
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã
     */
    public static class AppendLastDigitAction implements EmojiAction {
        @Override
        public long apply(long num) {
            return num * 10 + (num % 10);
        }

        @Override
        public String getDescription() {
            return "–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É —á–∏—Å–ª–∞ –≤ –∫–æ–Ω–µ—Ü";
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä
     */
    public static class ShuffleDigitsAction implements EmojiAction {
        @Override
        public long apply(long num) {
            String s = String.valueOf(num);
            List<Character> chars = s.chars().mapToObj(c -> (char)c).collect(Collectors.toList());
            Collections.shuffle(chars);
            String shuffled = chars.stream().map(String::valueOf).collect(Collectors.joining());
            return Long.parseLong(shuffled);
        }

        @Override
        public String getDescription() {
            return "–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç —Ü–∏—Ñ—Ä—ã —á–∏—Å–ª–∞";
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —á–∏—Å–ª–∞
     */
    public static class ReverseNumberAction implements EmojiAction {
        @Override
        public long apply(long num) {
            return Long.parseLong(new StringBuilder(String.valueOf(num)).reverse().toString());
        }

        @Override
        public String getDescription() {
            return "–ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ –∑–∞–¥–æ–º –Ω–∞–ø–µ—Ä–µ–¥";
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö —Ü–∏—Ñ—Ä
     */
    public static class AddLastTwoDigitsAction implements EmojiAction {
        @Override
        public long apply(long num) {
            return num + (num % 100);
        }

        @Override
        public String getDescription() {
            return "–ü—Ä–∏–±–∞–≤–ª—è–µ—Ç –∫ —á–∏—Å–ª—É –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —Ü–∏—Ñ—Ä—ã";
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –≤—ã—á–∏—Ç–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã
     */
    public static class SubtractLastDigitAction implements EmojiAction {
        @Override
        public long apply(long num) {
            return num - (num % 10);
        }

        @Override
        public String getDescription() {
            return "–í—ã—á–∏—Ç–∞–µ—Ç –∏–∑ —á–∏—Å–ª–∞ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É";
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è
     */
    public static class RandomMultiplyAction implements EmojiAction {
        @Override
        public long apply(long num) {
            return num * (2 + (long)(Math.random() * 5));
        }

        @Override
        public String getDescription() {
            return "–£–º–Ω–æ–∂–∞–µ—Ç —á–∏—Å–ª–æ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 2 –¥–æ 6";
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–∏—Ñ—Ä—ã
     */
    public static class AppendDigitAction implements EmojiAction {
        private final int digit;

        /**
         * @param digit —Ü–∏—Ñ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
         */
        public AppendDigitAction(int digit) {
            this.digit = digit;
        }

        @Override
        public long apply(long num) {
            return num * 10 + digit;
        }

        @Override
        public String getDescription() {
            return "–î–æ–±–∞–≤–ª—è–µ—Ç —Ü–∏—Ñ—Ä—É " + digit + " –≤ –∫–æ–Ω–µ—Ü —á–∏—Å–ª–∞";
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleMessage(update.getMessage());
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery().getMessage(),
                    update.getCallbackQuery().getData());
        }
    }

    private void handleMessage(Message message) {
        String text = message.getText();
        String chatId = message.getChatId().toString();
        String userId = message.getFrom().getId().toString();

        if (text.equals("/start")) {
            sendWelcomeMessage(chatId);
        } else if (text.equals("/play")) {
            startNewGame(chatId, userId);
        } else if (text.equals("/records")) {
            showRecords(chatId);
        } else if (text.equals("/help")) {
            showHelp(chatId);
        } else if (text.startsWith("–ö–æ–º–±–∏–Ω–∞—Ü–∏—è: ")) {
            processEmojiCombination(chatId, userId, text.substring("–ö–æ–º–±–∏–Ω–∞—Ü–∏—è: ".length()));
        } else {
            sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.");
        }
    }

    private void handleCallbackQuery(Message message, String data) {
        String chatId = message.getChatId().toString();
        String userId = data.split(":")[1];

        if (data.startsWith("restart:")) {
            startNewGame(chatId, userId);
        }
    }

    private void sendWelcomeMessage(String chatId) {
        String welcomeText = """
                üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –≠–º–æ–¥–∑–∏-–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞! üéÆ
                
                –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:
                1. –í–∞–º –¥–∞–µ—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ –Ω–∞–±–æ—Ä —ç–º–æ–¥–∑–∏.
                2. –ö–∞–∂–¥–æ–µ —ç–º–æ–¥–∑–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —á–∏—Å–ª–æ–º.
                3. –í–∞–º –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–∑ 8 —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ —á–∏—Å–ª–æ.
                4. –ö–∞–∂–¥–æ–µ —ç–º–æ–¥–∑–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –∏–≥—Ä—É.
                
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /records —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–æ—Ä–¥—ã.""";

        sendMessage(chatId, welcomeText);
    }

    private void startNewGame(String chatId, String userId) {
        currentScores.put(userId, 1); // –ù–∞—á–∏–Ω–∞–µ–º —Å 1
        usedEmojis.put(userId, new ArrayList<>());

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 15 —ç–º–æ–¥–∑–∏ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        List<String> availableEmojis = new ArrayList<>(emojiActions.keySet());
        Collections.shuffle(availableEmojis);
        List<String> gameEmojis = availableEmojis.subList(0, 15);

        String emojiList = String.join(" ", gameEmojis);

        String messageText = "üî¢ –ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: 1\n\n" +
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–º–æ–¥–∑–∏:\n" + emojiList + "\n\n" +
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–∑ 8 —ç–º–æ–¥–∑–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" +
                "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è: ‚ûï ‚úñÔ∏è üîº üî¢ üîÄ üîü 1Ô∏è‚É£ üíØ";

        sendMessage(chatId, messageText);
        showHelp(chatId);
    }

    private void processEmojiCombination(String chatId, String userId, String emojiCombination) {
        if (!currentScores.containsKey(userId)) {
            sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é /play");
            return;
        }

        List<String> combination = Arrays.stream(emojiCombination.split(" "))
                .filter(s -> !s.isEmpty())
                .toList();

        if (combination.size() != 8) {
            sendMessage(chatId, "–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ 8 —ç–º–æ–¥–∑–∏!");
            return;
        }

        List<String> used = usedEmojis.get(userId);
        long currentNumber = currentScores.get(userId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–º–æ–¥–∑–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã
        Set<String> uniqueEmojis = new HashSet<>();
        for (String emoji : combination) {
            if (!emojiActions.containsKey(emoji)) {
                sendMessage(chatId, "–≠–º–æ–¥–∑–∏ '" + emoji + "' –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!");
                return;
            }

            if (!uniqueEmojis.add(emoji)) {
                sendMessage(chatId, "–≠–º–æ–¥–∑–∏ '" + emoji + "' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞!");
                return;
            }

            if (used.contains(emoji)) {
                sendMessage(chatId, "–≠–º–æ–¥–∑–∏ '" + emoji + "' —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!");
                return;
            }
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
        StringBuilder steps = new StringBuilder("üî¢ –ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: " + currentNumber + "\n\n");

        for (String emoji : combination) {
            long newNumber = emojiActions.get(emoji).apply(currentNumber);
            steps.append(emoji).append(": ").append(currentNumber).append(" ‚Üí ").append(newNumber).append("\n");
            currentNumber = newNumber;
            used.add(emoji);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç
        currentScores.put(userId, (int) currentNumber);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ—Ä–¥
        long record = records.getOrDefault(userId, 0L);
        boolean isNewRecord = currentNumber > record;

        if (isNewRecord) {
            records.put(userId, currentNumber);
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        String resultText = steps + "\n" +
                "üéâ –ò—Ç–æ–≥–æ–≤–æ–µ —á–∏—Å–ª–æ: " + currentNumber + "\n" +
                (isNewRecord ? "üèÜ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!" : "–¢–µ–∫—É—â–∏–π —Ä–µ–∫–æ—Ä–¥: " + record) + "\n\n" +
                "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?";

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ò–≥—Ä–∞—Ç—å –µ—â–µ"
        SendMessage message = getMessage(chatId, userId, resultText);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞: ", e);
        }
    }

    private static SendMessage getMessage(String chatId, String userId, String resultText) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        InlineKeyboardButton playAgainButton = new InlineKeyboardButton();
        playAgainButton.setText("–ò–≥—Ä–∞—Ç—å –µ—â–µ");
        playAgainButton.setCallbackData("restart:" + userId);

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(playAgainButton);

        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(resultText);
        message.setReplyMarkup(keyboardMarkup);
        return message;
    }

    private void showRecords(String chatId) {
        if (records.isEmpty()) {
            sendMessage(chatId, "–†–µ–∫–æ—Ä–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –°—ã–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é /play!");
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        List<Map.Entry<String, Long>> sortedRecords = records.entrySet().stream()
                .sorted(Map.Entry.<String, Long>comparingByValue().reversed())
                .toList();

        StringBuilder recordsText = new StringBuilder("üèÜ –¢–û–ü —Ä–µ–∫–æ—Ä–¥–æ–≤:\n\n");

        for (int i = 0; i < Math.min(sortedRecords.size(), 10); i++) {
            Map.Entry<String, Long> entry = sortedRecords.get(i);
            recordsText.append(i + 1).append(". ID: ").append(entry.getKey())
                    .append(" - ").append(entry.getValue()).append("\n");
        }

        sendMessage(chatId, recordsText.toString());
    }

    private void sendMessage(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞: ", e);
        }
    }

    private void showHelp(String chatId) {
        StringBuilder helpText = new StringBuilder("üìö –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –∏ –∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:\n\n");

        emojiActions.forEach((emoji, action) -> helpText.append(emoji).append(" - ").append(action.getDescription()).append("\n"));

        helpText.append("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.");

        sendMessage(chatId, helpText.toString());
    }

    @Override
    public String getBotUsername() {
        return "EmojiSpeller";
    }
}